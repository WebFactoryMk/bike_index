#stolen_fields_store
#root_url.hidden{data: { url: ENV['BASE_URL'] }}
= form_for @bike, multipart: true do |f|
  = f.hidden_field :b_param_id_token
  = f.hidden_field :creation_organization_id
  = f.hidden_field :embeded, value: true
  .input-group
    - if @stolen
      %span#stolen_registration_first
    - unless @stolen || @non_stolen
      #registration-type-tabs
        %a.registration-type-tab{ href: '#', data: { stype: 'description' } }
          #{t('organization.register-stolen')}
        %a.registration-type-tab.stolen.current-type{ href: '#', data: { stype: 'serial' } }
          #{t('organization.register-nonstolen')}
    .control-group
      = f.label :serial_number, class: "control-label"
      .controls
        = f.text_field :serial_number, :required =>true, autocomplete: 'off', autocorrect: 'off', autocapitalize: 'off'
      - if @organization.use_additional_registration_field
        = f.label :additional_registration, "#{t('otganization.additional-reg-no')}", class: "control-label"
        .controls
          = f.text_field :additional_registration, autocomplete: 'off', autocorrect: 'off', autocapitalize: 'off'
    .has-no-serial.optional-block
      %label
        = f.check_box :has_no_serial, tabindex: -1 
        %span.stolen          
          #{t('common.Unknown')}
        %span.not-stolen          
          #{t('organization.has-no-serial')}

  .input-group.with-additional-block
    .control-group.select-jsonified
      = f.label :manufacturer_id, class: "control-label"
      .controls
        = f.text_field :manufacturer_id, value: @bike.manufacturer && @bike.manufacturer.name
        %span.help-block
          #{t('organization.select-other')}
    .hidden-other.control-group.manufacturer-other-input
      = f.label :manufacturer_other, "#{t('organization.other-manu')}", class: "control-label"
      .controls
        = f.text_field :manufacturer_other, placeholder: "#{t('organization.manu-name')}"

  .input-group
    .control-group.special-select-single
      = f.label :year, "#{t('organization.model-year')}", class: "control-label"
      .controls
        - years = (1900..Time.now.year+1).to_a.reverse.map {|i| [i,i] }
        = f.select :year, years, selected: Time.now.year, prompt: "#{t('organization.unsure-unknown')}"
    .unknown-year.optional-block
      %label
        %input#bike_unknown_year{ type: 'checkbox', tabindex: -1 }
        #{t('organization.unknown-year')}
        
  .input-group
    .control-group
      = f.label :frame_model, class: "control-label"
      .controls
        = f.text_field :frame_model, autocomplete: 'off'

  .input-group.with-optional-blocks
    .control-group.special-select-single
      = f.label :primary_frame_color_id, "Frame color", class: "control-label"
      .controls
        = collection_select( :bike, :primary_frame_color_id, Color.all, :id, :name, required: true, prompt: "Choose color" )
    %a#add-secondary.optional-form-block{data: {target: "#secondary-color", toggle: "#rm-secondary"}}
      #{t('organization.add-color')}
    %a#rm-secondary.optional-form-block.rm-block.currently-hidden{data: {target: "#secondary-color", toggle: "#add-secondary"}}
      #{t('organization.remove-color')}
    #secondary-color.hidden-other
      .control-group.special-select-single
        %label.control-label
          #{t('organization.second-color')}
        .controls
          = collection_select( :bike, :secondary_frame_color_id, Color.all, :id, :name, prompt: "Choose color" )
      %a#add-tertiary.optional-form-block{data: {target: "#tertiary-color", toggle: "#rm-tertiary"}}
        #{t('organization.add-color')}
      %a#rm-tertiary.optional-form-block.rm-block.currently-hidden{data: {target: "#tertiary-color", toggle: "#add-tertiary"}}
        #{t('organization.remove-color')}
    #tertiary-color.hidden-other
      .control-group
        %label.control-label
          #{t('organization.third-color')}
        .controls.special-select-single
          = collection_select( :bike, :tertiary_frame_color_id, Color.all, :id, :name, prompt: "Choose color" )
  
  #stolen_fields_container
    #stolen_fields
      = f.hidden_field :stolen, value: true
      = fields_for @stolen_record do |builder|
        = builder.hidden_field :phone_no_show, value: true
        .input-group
          .control-group
            = builder.label :phone, class: "control-label"
            .controls
              = builder.text_field :phone, required: "true"
        .input-group
          .control-group.datepicker-container
            = builder.label :date_stolen_input, "#{t('organization.when-stolen'}", class: "control-label"
            .controls
              #stolen_date
                = builder.text_field :date_stolen_input, value: @stolen_record.date_stolen.strftime('%m-%d-%Y'), required: true, data: { :'date-format' => 'mm-dd-yyyy' }
        #stolen-bike-location.input-group
          .control-group.special-select-single
            = builder.label :street, 'Where was it stolen?', class: 'control-label'
            #country_select_container.controls.special-select-single
              = builder.collection_select(:country_id, Country.all, :id, :name, prompt: 'Choose country')
          .control-group.extra-group.special-select-single
            .controls
              = builder.text_field :street, placeholder: "#{t('organization.intersect-adress')}"
            .controls.extra-field
              = builder.text_field :city, placeholder: "#{t('common.City')}"
            .controls.extra-field
              = builder.text_field :zipcode, placeholder: "#{t('common.Zipcode')}"
            #state-select.controls.extra-field.special-select-single
              = builder.collection_select(:state_id, State.all, :id, :name, include_blank: true, prompt: "State" )
        .input-group
          .control-group.large-text
            = builder.label :theft_description, "#{t('organization.desc-theft')}", class: "control-label"
            .controls
              = builder.text_area :theft_description, rows: 3
        .input-group
          %p.stolen-suggestion
            #{t('organization.filling-a')}
            %strong
              #{t('organization.police-report')}
            #{t('common.is')}
            %span.stolen-color
              #{t('organization.extreme-important')}
            #{t('organization.for-recovery')}
          .control-group
            = builder.label :police_report_number, "Police report number", class: 'control-label'
            .controls
              = builder.text_field :police_report_number
          .control-group.extra-group
            = builder.label :police_report_department, "Department & city", class: 'control-label'
            .controls
              = builder.text_field :police_report_department
        .input-group
          .control-group.receive-group
            .receive-notifications
              = builder.label :receive_notifications do
                = builder.check_box :receive_notifications, checked: true
                #{t('organization.receive-notif'))} #{@bike.type}
                %span
                  #{t('organization.eg-if-we')}

  .input-group.form-foot
    .control-group
      %label.control-label{ for: 'bike_owner_email' }
        #{t('stolen.your-email')}
      .controls
        = f.email_field :owner_email
    .submit-registration
      = submit_tag "Register", class: "button-submit"
      %span.what-you-register
        #{t('common.this')}
      = collection_select( :bike, :cycle_type_id, CycleType.all, :id, :name, required: true)
  - if @phone
    .input-group#optional-phone
      .control-group
        = f.label :phone, "#{t('organization.phone-opt')}", class: "control-label"
        .controls
          = f.text_field :phone
  .input-group.optional-group.form-photo-group
  
    - if @b_param.image.present? or @b_param.image_tmp.present?
      %strong
        #{t('organization.img-uploaded')}
    - else
      .filefield-button
        = f.file_field :image
      #filepath
      %span
        #{t('organization.opt-upload')}
